<stresstest>
    <!-- this test is the same as Query1Tester.xml but leaves out queries known to time out the server -->
  <testtype>querytester</testtype>
  <numloops>1000</numloops>
  <toscreen>true</toscreen>
  <sleeptime>1</sleeptime>
  <logoption>debug</logoption>
  <logfilename>auto</logfilename>
  <outputfile>auto</outputfile>
  <operations>
    <checkinterval>1000</checkinterval>
    <loaddir>QA_HOME/testdata/semantics/stress/</loaddir>
  </operations>
  <verification>
    <concurrency>1</concurrency>
    <repeat>1</repeat>
    <queries>

<query><![CDATA[
xquery version "1.0-ml";
let $_ := xdmp:log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
let $comment := "If this query fails, you need to set the appserver to 1.0-ml http://bugtrack.marklogic.com/23677 "
let $r := sem:sparql('
PREFIX fn: <http://www.w3.org/2005/xpath-functions#>
PREFIX  dc:  <http://purl.org/dc/elements/1.1/>
SELECT  ?title
WHERE   { ?x dc:title ?title
          FILTER (fn:not(bound(?title))) 
        }
')
return fn:true()
, xdmp:log("finished @@@@@@@@@@@@@@@@@@@@@@@ in " || xdmp:elapsed-time() )
]]></query>

      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";

let $result := sem:sparql("select * where { ?s ?p ?o .}",(),(), cts:collection-query("_COLLECTION_"))
let $_ := xdmp:log("Hello, world from _LOOP_ and _QA_HOME_ in collection _COLLECTION_")
let $count := fn:count($result)
let $_ := xdmp:log("QA Count is " || $count || " in " || xdmp:transaction())
return fn:true()
      ]]></query>

      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("select distinct ?s { ?s ?p ?o }", (), (), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("QB Count is " || $count || " in " || xdmp:transaction())
return fn:true()
      ]]></query>

      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";

let $result := sem:sparql("
prefix k: <http://example.org/kennedy/>
select ?fn1 ?ln1 ?fn2 ?ln2 ?bd2
{?p1 a k:person; k:first-name ?fn1; k:last-name ?ln1; k:spouse ?p2 .
 ?p2 k:first-name ?fn2; k:last-name ?ln2; k:birth-year ?bd2 .
filter (?ln1 = 'Kennedy')
filter (?bd2 >= '1940')}
order by ?p1
") (: no collection-query here...let triples get returned with cts:frequence ge 1 :)
let $count := fn:count($result)
let $_ := xdmp:log("QC Count is " || $count || " in " || xdmp:transaction())
return fn:true()
      ]]></query>

      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";

let $result := cts:triples((), (), "1940", ">", "quads", cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("QD Count is " || $count || " in " || xdmp:transaction())
return fn:true()
      ]]></query>



      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $_ := xdmp:log("beginning to load SP2 fragment ************************")
let $stagger := xdmp:sleep(xdmp:random(300000))
let $start := xdmp:elapsed-time()
let $dir := xdmp:filesystem-directory("/project/engineering/qa/data/semantics/sp2-fragments")//dir:pathname/string()
let $rand := xdmp:random(count($dir))
let $uris := sem:rdf-load($dir[$rand], "override-graph=_COLLECTION_") 
return xdmp:log("Loaded SP2_1M fragment in " || xdmp:elapsed-time() - $start),
fn:true()
      ]]></query>
      <!-- Q1 -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql('

PREFIX dc:      <http://purl.org/dc/elements/1.1/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX bench:   <http://localhost/vocabulary/bench/>
PREFIX xsd:     <http://www.w3.org/2001/XMLSchema#> 

SELECT ?yr
WHERE {
  ?journal a bench:Journal .
  ?journal dc:title "Journal 1 (1940)"^^xsd:string .
  ?journal dcterms:issued ?yr 
}',(),())   (: skip collection query, result will grow with test time :)
let $count := fn:count($result)
let $_ := xdmp:log("Q1......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q2 -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql('
PREFIX rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:    <http://www.w3.org/2000/01/rdf-schema#>
PREFIX swrc:    <http://swrc.ontoware.org/ontology#>
PREFIX foaf:    <http://xmlns.com/foaf/0.1/>
PREFIX bench:   <http://localhost/vocabulary/bench/>
PREFIX dc:      <http://purl.org/dc/elements/1.1/>
PREFIX dcterms: <http://purl.org/dc/terms/>

SELECT ?inproc ?author ?booktitle ?title 
       ?proc ?ee ?page ?url ?yr ?abstract
WHERE {
  ?inproc rdf:type bench:Inproceedings .
  ?inproc dc:creator ?author .
  ?inproc bench:booktitle ?booktitle .
  ?inproc dc:title ?title .
  ?inproc dcterms:partOf ?proc .
  ?inproc rdfs:seeAlso ?ee .
  ?inproc swrc:pages ?page .
  ?inproc foaf:homepage ?url .
  ?inproc dcterms:issued ?yr 
  OPTIONAL {
    ?inproc bench:abstract ?abstract
  }
}
ORDER BY ?yr',(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q2......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>


      <!-- Q3a -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX bench: <http://localhost/vocabulary/bench/>
PREFIX swrc:  <http://swrc.ontoware.org/ontology#>

SELECT ?article
WHERE {
  ?article rdf:type bench:Article .
  ?article ?property ?value 
  FILTER (?property=swrc:pages) 
}
",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q3a......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q3b -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX bench: <http://localhost/vocabulary/bench/>
PREFIX swrc:  <http://swrc.ontoware.org/ontology#>

SELECT ?article
WHERE {
  ?article rdf:type bench:Article .
  ?article ?property ?value
  FILTER (?property=swrc:month)
}",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q3b......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q3c -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX swrc:  <http://swrc.ontoware.org/ontology#>
PREFIX bench: <http://localhost/vocabulary/bench/>

SELECT ?article
WHERE {
  ?article rdf:type bench:Article .
  ?article ?property ?value
  FILTER (?property=swrc:isbn)
}",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q3c......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q4 -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX bench:   <http://localhost/vocabulary/bench/>
PREFIX dc:      <http://purl.org/dc/elements/1.1/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX foaf:    <http://xmlns.com/foaf/0.1/>
PREFIX swrc:    <http://swrc.ontoware.org/ontology#>

SELECT DISTINCT ?name1 ?name2 
WHERE {
  ?article1 rdf:type bench:Article .
  ?article2 rdf:type bench:Article .
  ?article1 dc:creator ?author1 .
  ?author1 foaf:name ?name1 .
  ?article2 dc:creator ?author2 .
  ?author2 foaf:name ?name2 .
  ?article1 swrc:journal ?journal .
  ?article2 swrc:journal ?journal
  FILTER (?name1<?name2)
}",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q4......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q5a-->
      <rem-query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf:  <http://xmlns.com/foaf/0.1/>
PREFIX bench: <http://localhost/vocabulary/bench/>
PREFIX dc:    <http://purl.org/dc/elements/1.1/>

SELECT DISTINCT ?person ?name
WHERE {
  ?article rdf:type bench:Article .
  ?article dc:creator ?person .
  ?inproc rdf:type bench:Inproceedings .
  ?inproc dc:creator ?person2 .
  ?person foaf:name ?name .
  ?person2 foaf:name ?name2
  FILTER (?name=?name2)
}",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q5a......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></rem-query>

      <!-- Q5b-->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf:  <http://xmlns.com/foaf/0.1/>
PREFIX bench: <http://localhost/vocabulary/bench/>
PREFIX dc:    <http://purl.org/dc/elements/1.1/>

SELECT DISTINCT ?person ?name
WHERE {
  ?article rdf:type bench:Article .
  ?article dc:creator ?person .
  ?inproc rdf:type bench:Inproceedings .
  ?inproc dc:creator ?person .
  ?person foaf:name ?name
}
",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q5b......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q7 -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX fn: <http://www.w3.org/2005/xpath-functions#>
PREFIX rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:    <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf:    <http://xmlns.com/foaf/0.1/>
PREFIX dc:      <http://purl.org/dc/elements/1.1/>
PREFIX dcterms: <http://purl.org/dc/terms/>

SELECT DISTINCT ?title
WHERE {
  ?class rdfs:subClassOf foaf:Document .
  ?doc rdf:type ?class .
  ?doc dc:title ?title .
  ?bag2 ?member2 ?doc .
  ?doc2 dcterms:references ?bag2
  OPTIONAL {
    ?class3 rdfs:subClassOf foaf:Document .
    ?doc3 rdf:type ?class3 .
    ?doc3 dcterms:references ?bag3 .
    ?bag3 ?member3 ?doc
    OPTIONAL {
      ?class4 rdfs:subClassOf foaf:Document .
      ?doc4 rdf:type ?class4 .
      ?doc4 dcterms:references ?bag4 .
      ?bag4 ?member4 ?doc3
    } FILTER (!bound(?doc4))
  } FILTER (!bound(?doc3))
}",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q7......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

  <!-- Q8  -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql('
PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dc:   <http://purl.org/dc/elements/1.1/>

SELECT DISTINCT ?name
WHERE {
  ?erdoes rdf:type foaf:Person .
  ?erdoes foaf:name "Paul Erdoes"^^xsd:string .
  {
    ?document dc:creator ?erdoes .
    ?document dc:creator ?author .
    ?document2 dc:creator ?author .
    ?document2 dc:creator ?author2 .
    ?author2 foaf:name ?name
    FILTER (?author!=?erdoes &amp;&amp;
            ?document2!=?document &amp;&amp;
            ?author2!=?erdoes &amp;&amp;
            ?author2!=?author)
  } UNION {
    ?document dc:creator ?erdoes.
    ?document dc:creator ?author.
    ?author foaf:name ?name
    FILTER (?author!=?erdoes)
  }
}',(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q8......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q9 -->
      <rem-query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?predicate
WHERE {
  {
    ?person rdf:type foaf:Person .
    ?subject ?predicate ?person
  } UNION {
    ?person rdf:type foaf:Person .
    ?person ?predicate ?object
  }
}
}",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q9......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></rem-query>

      <!-- Q10 -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX person: <http://localhost/persons/>

SELECT ?subject ?predicate
WHERE {
  ?subject ?predicate person:Paul_Erdoes
}",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q10......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q11 -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?ee
WHERE {
  ?publication rdfs:seeAlso ?ee
}
ORDER BY ?ee
LIMIT 10
OFFSET 50",(),(), cts:collection-query("_COLLECTION_"))
let $count := fn:count($result)
let $_ := xdmp:log("Q11......" || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q12a -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf:  <http://xmlns.com/foaf/0.1/>
PREFIX bench: <http://localhost/vocabulary/bench/>
PREFIX dc:    <http://purl.org/dc/elements/1.1/>

ASK {
  ?article rdf:type bench:Article .
  ?article dc:creator ?person1 .
  ?inproc  rdf:type bench:Inproceedings .
  ?inproc  dc:creator ?person2 .
  ?person1 foaf:name ?name1 .
  ?person2 foaf:name ?name2
  FILTER (?name1=?name2)
}",(),(), cts:collection-query("_COLLECTION_"))
let $_ := xdmp:log("Q12a...... in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q12b -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql('
PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dc:   <http://purl.org/dc/elements/1.1/>

ASK {
  ?erdoes rdf:type foaf:Person .
  ?erdoes foaf:name "Paul Erdoes"^^xsd:string .
  {
    ?document dc:creator ?erdoes .
    ?document dc:creator ?author .
    ?document2 dc:creator ?author .
    ?document2 dc:creator ?author2 .
    ?author2 foaf:name ?name
    FILTER (?author!=?erdoes &amp;&amp;
            ?document2!=?document &amp;&amp;
            ?author2!=?erdoes &amp;&amp;
            ?author2!=?author)
  } UNION {
    ?document dc:creator ?erdoes .
    ?document dc:creator ?author .
    ?author foaf:name ?name 
    FILTER (?author!=?erdoes)
  }
}',(),(), cts:collection-query("_COLLECTION_"))
let $_ := xdmp:log("Q12b...... in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>

      <!-- Q12c -->
      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $result := sem:sparql("
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX person: <http://localhost/persons/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

ASK {
  person:John_Q_Public rdf:type foaf:Person.
}",(),(), cts:collection-query("_COLLECTION_"))
let $_ := xdmp:log("Q12c...... in " || xdmp:elapsed-time())
return fn:not($result) (: should be false :) or fn:true()
      ]]></query>


      <query><![CDATA[
xquery version "1.0-ml";
import module namespace sem = "http://marklogic.com/semantics" at "/MarkLogic/semantics.xqy";
let $pfx := sem:prefixes("art: http://localhost/publications/articles/ jour: http://localhost/publications/journals/ onto: http://swrc.ontoware.org/ontology# inprocs: http://localhost/publications/inprocs/")
let $build := sem:rdf-builder($pfx)
let $triples := (
    $build("art:Journal2/1959/Article62", "rdfs:seeAlso", "http://www.distributes.tld/brining/forwardly.html"),
    $build("art:Journal9/1975/Article340", "onto:journal", "jour:Journal9/1975"),
    $build("art:Journal46/1984/Article1845", "dc:title", "gashing entirely mediocrities"),
    $build("art:Journal37/1986/Article1524", "a", sem:iri("http://localhost/vocabulary/bench/Article")),
    $build("inprocs:Proceeding1/1964/Inproceeding14", sem:iri("http://localhost/vocabulary/bench/booktitle"), "chronicling shindy espying"),
    cts:triples(sem:iri("http://localhost/publications/inprocs/Proceeding18/1975/Inproceeding731"), (), (), "=", (), cts:collection-query("_COLLECTION_"))
)
let $nodes := sem:database-nodes($triples, (), cts:collection-query("_COLLECTION_"))
let $count := fn:count($nodes)
let $_ := xdmp:log("CRUD1........... " || $count || " in " || xdmp:elapsed-time())
return fn:true()
      ]]></query>


    </queries>
  </verification>  
</stresstest>
